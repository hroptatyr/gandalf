dnl -------------------------------------------------------------------------
dnl Autoconf startup.
dnl -------------------------------------------------------------------------

AC_PREREQ([2.63])
m4_define([GIT_VERSION_GEN], [dnl
pushdef([version], [m4_esyscmd([./git-version-gen])])dnl
ifelse([]version[], [], [0.1.4], []version[])[]dnl
popdef([version])dnl
])
AC_INIT([gandalf], [GIT_VERSION_GEN], [https://trac.ga-group.nl/freundt_devel/])
AC_CONFIG_AUX_DIR([.])
AC_CONFIG_HEADER([lib/config.h])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([lib/])

dnl -------------------------------------------------------------------------
dnl Local copyright notices.
dnl -------------------------------------------------------------------------

AC_COPYRIGHT(
[#### Configuration script for gandalf, i.e. rolf and milf.
#### Copyright (C) 2011  Sebastian Freundt

### Don't edit this script!
### This script was automatically generated by the `autoconf' program
### from the file `./configure.ac'.
### To rebuild it, execute the command
###     autoreconf
])

AM_INIT_AUTOMAKE([foreign dist-xz])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

## initialise our cool message nest levels
SXE_INIT_MSG_LEVEL

## the build chain
AC_PROG_CC([icc gcc tcc cc])
AC_PROG_CC_C99
SXE_CHECK_CFLAGS

AC_PROG_YACC
AM_PROG_LEX
LT_INIT

AC_CHECK_HEADERS([stdbool.h])
AC_CHECK_HEADERS([fcntl.h])

## event loop
SXE_CHECK_LIBEV
AM_CONDITIONAL([HAVE_LIBEV], [test "${sxe_cv_feat_libev}" = "yes"])

## check for libxml to process fixml
PKG_CHECK_MODULES([LIBXML2], [libxml-2.0 >= 2.7])
pushdef([use_libxml2], [test -n "${LIBXML2_LIBS}"])
AM_CONDITIONAL([USE_LIBXML2], []use_libxml2[])
if []use_libxml2[]; then
	AC_DEFINE([HAVE_LIBXML2], [1], [Define if libxml2 support is there])
fi
popdef([use_libxml2])

## check for unserding
PKG_CHECK_MODULES([unserding], [unserding >= 0.2.1], [:], [enable_server="no"])

## just so we know what to build
AC_ARG_ENABLE([server], [
AS_HELP_STRING([--enable-server], [Build the server component, default: yes.])],
	[enable_server="${enableval}"], [enable_server="yes"])
AM_CONDITIONAL([BUILD_SERVER], [test "${enable_server}" = "yes"])
AC_ARG_ENABLE([cliapps], [
AS_HELP_STRING([--enable-client], [Build the client apps, default: yes.])],
	[enable_cliapps="${enableval}"], [enable_cliapps="yes"])
AM_CONDITIONAL([BUILD_CLIAPPS], [test "${enable_cliapps}" = "yes"])
AC_ARG_ENABLE([library], [
AS_HELP_STRING([--enable-library], [Build the library, default: no.])],
	[enable_library="${enableval}"], [enable_library="no"])
AM_CONDITIONAL([BUILD_LIBRARY], [test "${enable_library}" = "yes"])

AC_ARG_WITH([matlab], [
AS_HELP_STRING([--with-matlab], [Build the gandalf->matlab client, default: no.])],
	[dnl
		SXE_CHECK_MATLAB([${withval}])
		if test "${enable_cliapps}" != "no" -a \
			-n "${sxe_cv_matlabroot}"; then
			with_matlab="yes"
			CLIAPPS="${CLIAPPS} matlab"
		fi
	], [with_matlab="no"])
AM_CONDITIONAL([BUILD_MATCLI], [test "${with_matlab}" = "yes"])

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([cli/Makefile])
AC_CONFIG_FILES([cli/matlab/Makefile])
AC_CONFIG_FILES([lib/Makefile])
AC_CONFIG_FILES([srv/Makefile])
AC_CONFIG_FILES([srv/gandalf.pc])
AC_CONFIG_FILES([lib/libgandalf.pc])
AC_OUTPUT

if test -n "${BUILD_SERVER_FALSE}"; then
	BUILD_SRV="yes"
else
	BUILD_SRV="no"
fi
if test -n "${BUILD_CLIAPPS_FALSE}"; then
	BUILD_CLI="yes"
else
	BUILD_CLI="no"
fi
if test -n "${BUILD_LIBRARY_FALSE}"; then
	BUILD_LIB="yes"
else
	BUILD_LIB="no"
fi

echo
echo
echo "Build summary"
echo "============="
echo
echo "Build server: ${BUILD_SRV}"
echo "Build cliapps: ${BUILD_CLI}"
echo "Build library: ${BUILD_LIB}"
echo "XML: ${USE_LIBXML2_FALSE:+libxml2}"
echo

dnl configure.ac ends here
