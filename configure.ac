dnl -------------------------------------------------------------------------
dnl Autoconf startup.
dnl -------------------------------------------------------------------------

AC_PREREQ([2.63])
AC_INIT([gandalf], [0.3.2.GIT], [https://github.com/hroptatyr/gandalf])
AC_CONFIG_AUX_DIR([build-aux])
AC_CONFIG_HEADERS([src/config.h])
AC_CONFIG_MACRO_DIR([m4])

dnl -------------------------------------------------------------------------
dnl Local copyright notices.
dnl -------------------------------------------------------------------------

AC_COPYRIGHT([dnl
#### Configuration script for gandalf, i.e. rolf and milf.
#### Copyright (C) 2010-2015  Sebastian Freundt

### Don't edit this script!
### This script was automatically generated by the `autoconf' program
### from the file `./configure.ac'.
### To rebuild it, execute the command
###     autoreconf
])

AM_INIT_AUTOMAKE([foreign dist-xz color-tests parallel-tests subdir-objects])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

## the build chain
AC_PROG_CC([icc gcc tcc cc])
AC_PROG_CPP
SXE_CHECK_CC([c11 c1x c99 gnu99])
SXE_CHECK_CFLAGS
AC_CHECK_TOOLS([AR], [xiar ar], [false])
AC_C_BIGENDIAN

AC_CHECK_HEADERS([stdbool.h])
AC_CHECK_HEADERS([fcntl.h])
AC_CHECK_HEADERS([sys/sendfile.h])

## check for yuck helper
AX_CHECK_YUCK([with_included_yuck="yes"])
AX_YUCK_SCMVER([version.mk])
AC_CONFIG_LINKS([GNUmakefile:GNUmakefile])

AC_PATH_PROG([GPERF], [gperf])
if test -z "${GPERF}"; then
	GPERF="gperf"
fi
AC_ARG_VAR([GPERF], [full path to the gperf tool])

AC_CHECK_HEADERS([zlib.h])
AM_CONDITIONAL([HAVE_ZLIB], [test "${ac_cv_header_zlib_h}" = "yes"])

## event loop
SXE_CHECK_LIBEV
AM_CONDITIONAL([HAVE_LIBEV], [test "${sxe_cv_feat_libev}" = "yes"])

## check for libcurl (critical for gandapi)
PKG_CHECK_MODULES([curl], [libcurl >= 7.0.0], [have_curl="yes"], [have_curl="no"])
AM_CONDITIONAL([HAVE_CURL], [test "${have_curl}" = "yes"])

## check for lua, critical
PKG_CHECK_MODULES([lua], [lua >= 5.1], [have_lua="yes"], [
	have_lua="no"
	## just for debian
	PKG_CHECK_MODULES([lua5_1], [lua5.1], [
		have_lua="yes"
		lua_LIBS="${lua5_1_LIBS}"
		lua_CFLAGS="${lua5_1_CFLAGS}"
		], [
		have_lua="no"
		if test "${enable_server}" = "yes"; then
			AC_MSG_WARN([server build request but lua missing.])
			enable_server="no"
		fi
	])
])
AM_CONDITIONAL([HAVE_LUA], [test "${have_lua}" = "yes"])


## check splicing features
SXE_CHECK_TCP_SPLICE
SXE_CHECK_UDP_SPLICE


## just so we know what to build
AC_ARG_ENABLE([server], [dnl
AS_HELP_STRING([--enable-server], [
Build the server component, default: yes.])],
	[enable_server="${enableval}"], [enable_server="yes"])
AC_ARG_ENABLE([cliapps], [dnl
AS_HELP_STRING([--enable-client], [
Build the client apps, default: yes.])],
	[enable_cliapps="${enableval}"], [enable_cliapps="${have_curl}"])
CLIAPPS="gandqry"

## check who can build our specialised apis
AC_ARG_WITH([matlab], [dnl
AS_HELP_STRING([--with-matlab], [
Build the gandalf->matlab client, default: no.])],
	[with_matlab="${withval}"], [with_matlab="no"])
## or maybe octave?
AC_ARG_WITH([octave], [dnl
AS_HELP_STRING([--with-octave], [
Build the gandalf->octave client, default: yes.])],
	[with_octave="${withval}"], [with_octave="yes"])

## the actual checks
if test "${with_matlab}" = "yes"; then
	SXE_CHECK_MATLAB
	if test "${sxe_cv_matlab_mex_h}" = "yes"; then
		have_matlab="yes"
		CLIAPPS="${CLIAPPS} matlab"
	else
		have_matlab="no"
	fi
fi
if test "${with_octave}" = "yes"; then
	SXE_CHECK_OCTAVE
	if test "${sxe_cv_octave_mex_h}" = "yes" -a -n "${OCTAVEPATH}"; then
		have_octave="yes"
		CLIAPPS="${CLIAPPS} octave"
	else
		have_octave="no"
	fi
fi
AM_CONDITIONAL([BUILD_MATCLI], [test "${have_matlab}" = "yes"])
AM_CONDITIONAL([BUILD_OCTCLI], [test "${have_octave}" = "yes"])


AC_ARG_ENABLE([virtuoso], [dnl
AS_HELP_STRING([--enable-virtuoso], [
Set up gandalf server against virtuoso triplestore, default: no])],
	[enable_virtuoso="${enableval}"], [enable_virtuoso="no"])

if test "${enable_virtuoso}" = "yes"; then
	AC_ARG_VAR([OBDC_CFLAGS], [include directives for odbc driver])
	AC_ARG_VAR([OBDC_LIBS], [libraries for odbc driver])

	save_CPPFLAGS="${CPPFLAGS}"
	CPPFLAGS="${CPPFLAGS} ${ODBC_CFLAGS}"
	AC_CHECK_HEADERS([sql.h])
	CPPFLAGS="${save_CPPFLAGS}"

	save_LDFLAGS="${LDFLAGS}"
	LDFLAGS="${LDFLAGS} ${ODBC_LIBS}"
	AC_CHECK_FUNCS([SQLConnect])
	LDFLAGS="${save_LDFLAGS}"

	AC_DEFINE([USE_VIRTUOSO], [1], [define for virtuoso backend])
	with_database="virtuoso"
	dict_CFLAGS="${ODBC_CFLAGS}"
	dict_LIBS="${ODBC_LIBS}"
else
	PKG_CHECK_MODULES([tokyocabinet], [tokyocabinet])
	AC_DEFINE([USE_TOKYOCABINET], [1], [define for tokyocabinet backend])

	with_database="tokyocabinet"
	dict_CFLAGS="${tokyocabinet_CFLAGS}"
	dict_LIBS="${tokyocabinet_LIBS}"
fi
AC_SUBST([dict_CFLAGS])
AC_SUBST([dict_LIBS])
SRVBACK="${with_database}"

AM_CONDITIONAL([USE_TOKYOCABINET], [test "${with_database}" = "tokyocabinet"])
AM_CONDITIONAL([USE_VIRTUOSO], [test "${with_database}" = "virtuoso"])
AM_CONDITIONAL([USE_REDLAND], [test "${with_database}" = "redland"])


## libtool goddess^Wgoodness
SXE_CHECK_LIBTOOL


AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([build-aux/Makefile])
AC_CONFIG_FILES([cli/Makefile])
AC_CONFIG_FILES([cli/matlab/Makefile])
AC_CONFIG_FILES([src/Makefile])
AC_CONFIG_FILES([www/Makefile])
AC_OUTPUT

AM_CONDITIONAL([BUILD_SERVER], [test "${enable_server}" = "yes"])
AM_CONDITIONAL([BUILD_CLIAPPS], [test "${enable_cliapps}" = "yes"])

if test -n "${BUILD_SERVER_FALSE}"; then
	BUILD_SRV="yes (backed by ${SRVBACK})"
else
	BUILD_SRV="no"
fi
if test -n "${BUILD_CLIAPPS_FALSE}"; then
	BUILD_CLI="yes (${CLIAPPS})"
else
	BUILD_CLI="no"
fi

echo
echo
echo "Build summary"
echo "============="
echo
echo "Build server: ${BUILD_SRV}"
echo "Build cliapps: ${BUILD_CLI}"
echo

dnl configure.ac ends here
